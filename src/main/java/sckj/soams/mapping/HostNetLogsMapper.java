package sckj.soams.mapping;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

import sckj.soams.entity.HostNetLogs;

public interface HostNetLogsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table host_net_logs
     *
     * @mbggenerated
     */
    @Delete({
        "delete from host_net_logs",
        "where seq = #{seq,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long seq);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table host_net_logs
     *
     * @mbggenerated
     */
    @Insert({
        "insert into host_net_logs (seq, recdt, ",
        "hostid, netname, ",
        "rxbps, txbps)",
        "values (#{seq,jdbcType=BIGINT}, #{recdt,jdbcType=DATE}, ",
        "#{hostid,jdbcType=VARCHAR}, #{netname,jdbcType=VARCHAR}, ",
        "#{rxbps,jdbcType=VARCHAR}, #{txbps,jdbcType=VARCHAR})"
    })
    int insert(HostNetLogs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table host_net_logs
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "seq, recdt, hostid, netname, rxbps, txbps",
        "from host_net_logs",
        "where seq = #{seq,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="seq", property="seq", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="recdt", property="recdt", jdbcType=JdbcType.DATE),
        @Result(column="hostid", property="hostid", jdbcType=JdbcType.VARCHAR),
        @Result(column="netname", property="netname", jdbcType=JdbcType.VARCHAR),
        @Result(column="rxbps", property="rxbps", jdbcType=JdbcType.VARCHAR),
        @Result(column="txbps", property="txbps", jdbcType=JdbcType.VARCHAR)
    })
    HostNetLogs selectByPrimaryKey(Long seq);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table host_net_logs
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "seq, recdt, hostid, netname, rxbps, txbps",
        "from host_net_logs"
    })
    @Results({
        @Result(column="seq", property="seq", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="recdt", property="recdt", jdbcType=JdbcType.DATE),
        @Result(column="hostid", property="hostid", jdbcType=JdbcType.VARCHAR),
        @Result(column="netname", property="netname", jdbcType=JdbcType.VARCHAR),
        @Result(column="rxbps", property="rxbps", jdbcType=JdbcType.VARCHAR),
        @Result(column="txbps", property="txbps", jdbcType=JdbcType.VARCHAR)
    })
    List<HostNetLogs> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table host_net_logs
     *
     * @mbggenerated
     */
    @Update({
        "update host_net_logs",
        "set recdt = #{recdt,jdbcType=DATE},",
          "hostid = #{hostid,jdbcType=VARCHAR},",
          "netname = #{netname,jdbcType=VARCHAR},",
          "rxbps = #{rxbps,jdbcType=VARCHAR},",
          "txbps = #{txbps,jdbcType=VARCHAR}",
        "where seq = #{seq,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(HostNetLogs record);

    @Select({
        "select",
        "seq, recdt, hostid, netname, rxbps, txbps",
        " from (select seq, recdt, hostid, netname, rxbps, txbps ",
    	"  from host_net_logs where hostid=#{hostid} ",
    	"order by recdt desc limit 0,#{size}) a order by a.recdt asc"
    })
    @Results({
        @Result(column="seq", property="seq", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="recdt", property="recdt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="hostid", property="hostid", jdbcType=JdbcType.VARCHAR),
        @Result(column="netname", property="netname", jdbcType=JdbcType.VARCHAR),
        @Result(column="rxbps", property="rxbps", jdbcType=JdbcType.VARCHAR),
        @Result(column="txbps", property="txbps", jdbcType=JdbcType.VARCHAR)
    })
	List<HostNetLogs> getNetLogs(Map<String,Object> map);
}